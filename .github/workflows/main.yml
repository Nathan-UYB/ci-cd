name: CI/CD de l'application Node.js
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v2

      - name: Configuration de Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Installation des dépendances
        run: npm install

      - name: Démarrage du serveur en arrière-plan
        run: node server.js &

      - name: Attente du démarrage du serveur
        run: sleep 5

      - name: Test de l'endpoint /hello
        id: test_hello
        run: |
          response=$(curl -s http://localhost:3000/hello)
          if [ "$response" = "Hello World!" ]; then
            echo "result=✅ Test de l'endpoint /hello réussi." >> $GITHUB_OUTPUT
          else
            echo "result=❌ Test de l'endpoint /hello échoué." >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Test de l'endpoint /metrics
        id: test_metrics
        run: |
          response=$(curl -s http://localhost:3000/metrics)
          if [[ "$response" == *"hello_requests_total"* ]]; then
            echo "result=✅ Test de l'endpoint /metrics réussi." >> $GITHUB_OUTPUT
          else
            echo "result=❌ Test de l'endpoint /metrics échoué." >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Build Docker image
        run: docker build -t myapp:${{ github.sha }} .

      - name: Save Docker image as artifact
        run: docker save myapp:${{ github.sha }} | gzip > myapp.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: myapp.tar.gz

      - name: Envoi du rapport sur Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          message="Rapport CI/CD :\n${{ steps.test_hello.outputs.result }}\n${{ steps.test_metrics.outputs.result }}"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$message\"}" "$DISCORD_WEBHOOK"

      - name: Téléchargement de Prometheus
        run: |
          wget https://github.com/prometheus/prometheus/releases/download/v2.49.1/prometheus-2.49.1.linux-amd64.tar.gz
          tar xzf prometheus-2.49.1.linux-amd64.tar.gz
          mv prometheus-2.49.1.linux-amd64 prometheus

      - name: Génération du prometheus.yml
        run: |
          cat <<EOF > prometheus/prometheus.yml
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'nodejs-app'
              static_configs:
                - targets: ['localhost:3000']
          EOF

      - name: Vérification du service Node.js avant Prometheus
        run: |
          for i in {1..10}; do
            response=$(curl -s http://localhost:3000/metrics)
            if [[ "$response" == *"hello_requests_total"* ]]; then
              echo "✅ Service Node.js prêt pour Prometheus."
              break
            fi
            sleep 2
          done

      - name: Lancement de Prometheus en arrière-plan
        run: ./prometheus/prometheus --config.file=./prometheus/prometheus.yml &

      - name: Attente du démarrage de Prometheus
        run: sleep 15

      - name: Vérification du target Prometheus
        run: |
          for i in {1..10}; do
            status=$(curl -s http://localhost:9090/api/v1/targets | grep '"health":"up"')
            if [ -n "$status" ]; then
              echo "✅ Prometheus collecte les métriques Node.js."
              break
            fi
            sleep 2
          done
          status=$(curl -s http://localhost:9090/api/v1/targets | grep '"health":"up"')
          if [ -z "$status" ]; then
            echo "❌ Prometheus ne collecte pas les métriques Node.js."
            exit 1
          fi

      - name: Téléchargement de Grafana
        run: |
          wget https://dl.grafana.com/oss/release/grafana-10.2.2.linux-amd64.tar.gz
          tar -zxvf grafana-10.2.2.linux-amd64.tar.gz
          mv grafana-10.2.2 grafana

      - name: Lancement de Grafana en arrière-plan
        run: ./grafana/bin/grafana-server --homepath ./grafana &

      - name: Attente du démarrage de Grafana
        run: sleep 10

      - name: Vérification du démarrage de Grafana
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$status" = "200" ]; then
            echo "✅ Grafana est lancé sur http://localhost:3000."
          else
            echo "❌ Grafana n'est pas accessible."
            exit 1
          fi

      - name: Ajout de la source Prometheus dans Grafana
        run: |
          sleep 10 # Attendre que Grafana soit bien prêt
          curl -X POST http://localhost:3000/api/datasources \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Basic $(echo -n admin:admin | base64)" \
            -d '{
              "name": "Prometheus",
              "type": "prometheus",
              "url": "http://localhost:9090",
              "access": "proxy",
              "basicAuth": false
            }'

      - name: Création du dashboard Grafana
        run: |
          cat <<EOF > dashboard.json
          {
            "dashboard": {
              "id": null,
              "uid": null,
              "title": "Node.js Monitoring",
              "timezone": "browser",
              "panels": [
                {
                  "type": "graph",
                  "title": "Nombre total de requêtes /hello",
                  "datasource": "Prometheus",
                  "targets": [{"expr": "hello_requests_total"}],
                  "gridPos": {"x": 0, "y": 0, "w": 12, "h": 8}
                },
                {
                  "type": "graph",
                  "title": "Latence moyenne (exemple)",
                  "datasource": "Prometheus",
                  "targets": [{"expr": "avg(http_request_duration_seconds_sum) / avg(http_request_duration_seconds_count)"}],
                  "gridPos": {"x": 12, "y": 0, "w": 12, "h": 8}
                }
              ],
              "schemaVersion": 16,
              "version": 0
            },
            "overwrite": true
          }
          EOF
          curl -X POST http://localhost:3000/api/dashboards/db \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Basic $(echo -n admin:admin | base64)" \
            -d @dashboard.json